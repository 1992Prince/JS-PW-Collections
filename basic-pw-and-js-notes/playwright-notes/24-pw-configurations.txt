**10) TimeOuts [https://playwright.dev/docs/test-timeouts]

Playwright Test has multiple configurable timeouts for various tasks.

	Timeout			Default						Description
	
	Test timeout	30_000 ms			Timeout for each test
														Set in config
														{ timeout: 60_000 }
														Override in test
														test.setTimeout(120_000)
														
	Expect timeout	5_000 ms			Timeout for each assertion
														Set in config
														{ expect: { timeout: 10_000 } }
														Override in test
														expect(locator).toBeVisible({ timeout: 10_000 })
														

***Test timeout
Playwright Test enforces a timeout for each test, 30 seconds by default. 
Time spent by the test function, fixture setups, and beforeEach hooks is included in the test timeout.

Timed out test produces the following error:

example.spec.ts:3:1 › basic test ===========================

Timeout of 30000ms exceeded.

Additional separate timeout, of the same value, is shared between fixture teardowns and afterEach hooks, after the test function has finished.

The same timeout value also applies to beforeAll and afterAll hooks, but they do not share time with any test.

`Set test timeout in the config
playwright.config.ts
import { defineConfig } from '@playwright/test';

export default defineConfig({
  timeout: 120_000,
});

`Set timeout for a single test
example.spec.ts
import { test, expect } from '@playwright/test';

test('slow test', async ({ page }) => {
  test.slow(); // Easy way to triple the default timeout
  // ...
});

test('very slow test', async ({ page }) => {
  test.setTimeout(120_000);
  // ...
});

`Change timeout from a beforeEach hook
`Change timeout for beforeAll/afterAll hook

**Expect timeout
Auto-retrying assertions like expect(locator).toHaveText() have a separate timeout, 5 seconds by default. 
Assertion timeout is unrelated to the test timeout. It produces the following error:

example.spec.ts:3:1 › basic test ===========================

Error: expect(received).toHaveText(expected)

Expected string: "my text"
Received string: ""
Call log:
  - expect.toHaveText with timeout 5000ms
  - waiting for "locator('button')"

`Set expect timeout in the config
playwright.config.ts
import { defineConfig } from '@playwright/test';

export default defineConfig({
  expect: {
    timeout: 10_000,
  },
});

`Specify expect timeout for a single assertion

***Global timeout


**12. use with {trace, headless}
The use property in Playwright allows you to specify default configurations for all tests, including browser settings like whether to run in headless mode or capture trace data for debugging. 

Here's a breakdown:

***1. trace in use:
trace allows Playwright to capture a trace of your test execution. A trace is a detailed log of the browser's activity, including the sequence of events (like clicking, typing, etc.), screenshots, and network requests.
This is extremely helpful for debugging failed tests because it lets you inspect the exact sequence of actions taken during the test.
Example:

export default defineConfig({
  use: {
    trace: 'on',  // Enables trace capturing for all tests
  },
});
`trace: 'on': Enables tracing for all tests.
`trace: 'retain-on-failure': Only keeps the trace if a test fails. This is useful if you don’t want to keep traces for all tests, just the ones that fail.
`trace: 'off': Disables trace capturing.

When you run tests with trace enabled, you can inspect the trace by looking at the generated .zip file (usually found in the test-results folder) to view detailed information about the test run.

***2. headless in use:
headless determines whether the browser runs in headless mode or not. By default, browsers run in headless mode in Playwright, meaning the browser's UI won't be visible during test execution. 
This is faster and saves resources.
If you want to see the browser UI while running the tests (for debugging or demonstration purposes), you can disable headless mode.
Example:

export default defineConfig({
  use: {
    headless: false,  // Run browser in non-headless mode (UI visible)
  },
});
`headless: true: Runs tests in headless mode (default).
`headless: false: Runs tests with the browser UI visible, useful for debugging.

`Combining trace and headless in use:
You can combine both options in the use property to capture traces while running tests with the browser UI visible.

Example:

export default defineConfig({
  use: {
    trace: 'retain-on-failure',  // Keep trace only when the test fails
    headless: false,  // Run with browser UI visible
  },
});

**13. projects with name and use
The projects property in Playwright allows you to define multiple projects with different configurations for your tests. 
This is useful when you want to run the same set of tests in different browsers or with different settings.

name: Specifies the name of the project.
use: Defines the configuration settings that apply to each project (e.g., which browser to use, base URL, etc.).
Example:
Let’s say you want to run tests in both Chromium and Firefox:

export default defineConfig({
  projects: [
    {
      name: 'chromium',  // Project 1 for Chromium
      use: { browserName: 'chromium' },  // Use Chromium for this project
    },
    {
      name: 'firefox',  // Project 2 for Firefox
      use: { browserName: 'firefox' },  // Use Firefox for this project
    },
  ],
});

`What happens in this example:
	Project 1 runs all the tests in Chromium.
	Project 2 runs all the tests in Firefox.

This way, you can execute the same set of tests in different browsers without changing the test code itself. Each project runs independently with its own configurations.

`Use Cases for projects:
	Testing in multiple browsers (Chromium, Firefox, WebKit).
	Running tests with different settings (e.g., different base URLs, different browser configurations, etc.).